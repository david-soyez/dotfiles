set nocompatible              " be iMproved, required
filetype off                  " required
syntax on

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins declaration starts here

Plugin 'leafgarland/typescript-vim'
Plugin 'StanAngeloff/php.vim' " Up-to-date PHP syntax file
Plugin 'shawncplus/phpcomplete.vim' " Improved PHP omnicompletion
Plugin 'nathanaelkane/vim-indent-guides' " displays indent levels in code
Plugin 'flazz/vim-colorschemes' " one colorscheme pack to rule them all
"Plugin 'tpope/vim-fugitive' "  a Git wrapper !! SLOW !!
Plugin 'majutsushi/tagbar' " displays tags in a window F8
Plugin 'airblade/vim-gitgutter' " shows a git diff in the gutte
Plugin 'L9' " vim-scripts Library
Plugin 'FuzzyFinder' " vim-scripts Quickly reach the buffer/file/command/bookmark/tag
"Plugin 'bling/vim-airline' " Lean and mean status bar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes' " vim airline themes
"Plugin 'taglist.vim' " vim-scripts Tag List
Plugin 'wincent/command-t' " Fast file navigation
Plugin 'terryma/vim-multiple-cursors' " True Sublime Text style multiple selections for Vim
Plugin 'bronson/vim-trailing-whitespace' " Highlights trailing whitespace in red and provides :FixWhitespace to fix it
Plugin 'xolox/vim-misc' " xolox dependency
Plugin 'xolox/vim-session' " Extended session management for Vim
Plugin 'Valloric/YouCompleteMe' " A code-completion engine
"Plugin 'SirVer/ultisnips' " The ultimate snippet solution for Vim
"Plugin 'honza/vim-snippets' " supports all snippets with YouCompleteMe
Plugin 'spolu/dwm.vim' " Tiled window management
"Plugin 'easymotion/vim-easymotion'
Plugin 'haya14busa/incsearch.vim'
"Plugin 'haya14busa/incsearch-easymotion.vim'
"Plugin 'noah/vim256-color'
Plugin 'pangloss/vim-javascript'
Plugin 'morhetz/gruvbox'
Plugin 'tomasr/molokai'
Plugin 'ap/vim-css-color'
Plugin 'xolox/vim-notes'
Plugin 'scrooloose/nerdtree' " A tree explorer plugin for vim
"Bundle 'jistr/vim-nerdtree-tabs'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'Quramy/tsuquyomi' " typescript
"Plugin 'Shougo/vimproc.vim'
Plugin 'mattn/emmet-vim' " emmet
Plugin 'AndrewRadev/splitjoin.vim' " A vim plugin that simplifies the transition between multiline and single-line code

" Plugins declaration ends here

call vundle#end()            " required
filetype plugin indent on    " required

" non-Plugin stuff after this line

set shortmess+=I " No intro when starting Vim
set history=100 " keep 100 undo
set wildmenu " Better command-line completion
set backspace=indent,eol,start " The normal behaviour of backspace

" search
set ignorecase " Search insensitive
set smartcase " Search always insensitive but sensitive when there is a uppercase
set incsearch " move the cursor to the matched string while typing
"built-in: Press * to search forwards for selected text, or # to search backwards

let &showbreak="\u21aa " " Show a left arrow when wrapping text

" statusbar
set laststatus=2
set statusline=%1*			" Switch to User1 color highlight
set statusline+=%<%F			" file name, cut if needed at start
set statusline+=%M			" modified flag
set statusline+=%y			" file type
set statusline+=%=			" separator from left to right justified

"nmap <F8> :TagbarToggle<CR>
autocmd vimenter * GitGutterEnable
autocmd vimenter * GitGutterSignsEnable
autocmd vimenter * GitGutterLineHighlightsDisable
let g:gitgutter_override_sign_column_highlight = 1
highlight SignColumn ctermbg=black    " terminal Vim
highlight SignColumn guibg=black      " gVim/MacVim

"theme and fonts
"set term=screen-256color
set background=dark
"set t_Co=256
"colorscheme 256-jungle
"let g:rehash256 = 1
"let g:molokai_original = 1
"colorscheme molokai_dark
"let g:airline_theme='molokai'

" gruvbox
let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
set termguicolors
colorscheme gruvbox
"let g:gruvbox_contrast_dark = "hard"
let g:airline_theme='gruvbox'

" papercolor
"colorscheme papercolor
"set background=dark

"let g:PaperColor_Light_Override = { 'background' : '#abcdef', 'cursorline' : '#dfdfff', 'matchparen' : '#d6d6d6' , 'comment' : '#8e908c' }
"let g:PaperColor_Dark_Override = { 'background' : '#1c1c1c', 'cursorline' : '#abcdef', 'matchparen' : '#3a3a3a', 'comment' : '#5f875f' }
"let g:airline_theme='papercolor'

"hi Normal guibg=NONE ctermbg=NONE
"hi CursorLine cterm=NONE ctermbg=21

"colorscheme jellybeans
"let g:airline_theme='jellybeans'
"let g:airline_theme='molokai'
"colorscheme cobalt2
"set guifont=Monospace\ 14
set guifont=Menlo\ Regular:h12

"let g:jellybeans_use_lowcolor_black = 0

" speed up scrolling in terminal
set lazyredraw
set ttyfast

"set colorcolumn=110
"let w:m1=matchadd('ErrorMsg', '\%>110v.\+', -1)

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

"jk to exit insert mode
inoremap jk <esc>
inoremap <esc> <nop>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_Auto_Open = 1
let Tlist_Use_Right_Window = 1

" dwm Default master width
let g:dwm_master_pane_width = 120
" Tab navigation like Firefox.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

let mapleader = "\<Space>"

set number
set relativenumber

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <Leader>l :call NumberToggle()<cr>

" Control-S to save
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-O>:update<CR>

" Indentation
set expandtab " insert space characters whenever the tab key is pressed
set shiftwidth=4 "control how many columns text is indented with the reindent operations (<< and >>)
set softtabstop=4 "control how many columns vim uses when you hit Tab in insert mode
set autoindent " copy the indentation from the previous line
set smartindent "automatically inserts one extra level of indentation in some cases


"set noexpandtab
"set copyindent
"set preserveindent
"set softtabstop=0
"set shiftwidth=4
"set tabstop=4

"set hlsearch
"hi Search guibg=yellow

"open a NERDTree automatically when vim starts up
"autocmd vimenter * NERDTree
"shortcut to open NERDTree
noremap <Leader>n :NERDTreeToggle<CR>
let NERDTreeHijackNetrw=1
"noremap <Leader>n :NERDTreeTabsToggle<CR>
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"opens tags in .git directory, looking for it parent to parent 
set tags=./.git/tags;

"let g:session_default_name = 'geolid'
let g:session_directory = '~/.vim/sessions'
let g:session_autoload = 'no'
let g:session_autosave = 'no'
"let g:session_autosave_to = 'geolid'
"let g:session_autosave_periodic = '5'
" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers
" Don't persist options and mappings because it can corrupt sessions.
set sessionoptions-=options

let g:ycm_key_invoke_completion = '<C-1>'

"Use TAB to complete when typing words, else inserts TABs as usual.
"Uses dictionary and source files to find matching words to complete.
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>

"let g:neocomplete#enable_at_startup = 1

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For conceal markers.
"if has('conceal')
"  set conceallevel=2 concealcursor=niv
"endif

"Shortcuts for opening and saving sessions
noremap ø :OpenSession<CR> 
noremap ß :SaveSession<CR> 

"shortcut for C-X C-P
inoremap <C-Space> <C-x><C-p>

" indent guide
let g:indent_guides_auto_colors = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
autocmd vimenter * IndentGuidesEnable

" red cursor
highlight cursor guifg=white guibg=red

" disable cursor blinking:
set guicursor+=a:blinkon0

" cursor color
highlight Cursor guifg=red guibg=yellow

" color the currenet line
set cursorline
highlight CursorLine guifg=NONE guibg=#333333
highlight Visual guibg=pink guifg=#000000 gui=none

" map find /
nmap <Leader>f /

" for watch mode or live refresh
set backupcopy=yes

" ultisnips
let g:UltiSnipsExpandTrigger="<C-b>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" mouse
set mouse=a
set ttymouse=xterm2

" You can use other keymappings like <C-l> instead of <CR> if you want to
" use these mappings as default search and somtimes want to move cursor
" with  EasyMotion.
"function! s:incsearch_config(...) abort
"return incsearch#util#deepextend(deepcopy({
"\   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
"\   'keymap': {
"\     "\<CR>": '<Over>(easymotion)'
"\   },
"\   'is_expr': 0
"\ }), get(a:, 1, {}))
"endfunction

"noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
"noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command':'?'}))
"noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay':1}))

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" vim airline
let g:airline#extensions#tabline#enabled = 1 " Automatically displays all buffers when there's only one tab open

" Javascript plugin
let g:javascript_plugin_jsdoc = 1

" php.vim
function! PhpSyntaxOverride()
    hi! def link phpDocTags  phpDefine
    hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END

" key sequence timeout
set timeoutlen=1000 ttimeoutlen=0

" command-t
nnoremap <Leader>ctf :CommandTFlush<cr>

" youcompleteme
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview

" quicky opens .vimrc
nnoremap <leader>ep :split ~/.vimperatorrc<cr>G

" quicky opens .vimrc
nnoremap <leader>ev :split $MYVIMRC<cr>G

" quicly source .vimrv
nnoremap <leader>sv :w<cr>:source $MYVIMRC<cr>

" shell
set shell=/bin/bash

" abbreviation
iabbrev atl alt
iabbrev cslg console.log(

" beginning previous line
nnoremap K -

" beginning next line
nnoremap J +

" beginning text of current line
nnoremap H ^

" end text of current line
nnoremap L g_

" select block normal and visual mode
nnoremap <C-m> vat
vnoremap <C-m> at

" set working directory
"cd /Users/david.soyez/Documents/Projects/prequal/htdocs/tools/mortgage-prequalification/src
"cd /Users/david.soyez/Documents/Projects/cortel-site

set autoread
augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command line window.
        autocmd BufEnter        * silent! checktime
        "autocmd CursorHold      * silent! checktime
        "autocmd CursorHoldI     * silent! checktime
        "these two _may_ slow things down. Remove if they do.
        "autocmd CursorMoved     * silent! checktime
        "autocmd CursorMovedI    * silent! checktime
    endif
augroup END

" fim-fugitive
nnoremap <Leader>glc :Gdiff HEAD^1<cr>

" comment line
noremap <Leader>cc ^I//<esc>
nnoremap <Leader>dc ^xx<esc>

nnoremap å 1
nnoremap ß 2
nnoremap ∂ 3
nnoremap ƒ 4
nnoremap © 5
nnoremap ˙ 6
nnoremap ∆ 7
nnoremap ˚ 8
nnoremap ¬ 9
nnoremap … 0

set wildignore=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*
let g:CommandTMaxCachedDirectories = 10

"editorConfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']


if !exists("g:ycm_semantic_triggers")
    let g:ycm_semantic_triggers = {}
endif

let g:ycm_semantic_triggers['typescript'] = ['.']

autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript

" emmet
let g:user_emmet_leader_key='<C-m>'

" fast save
nnoremap <C-s> :w<CR>

" select line content
nnoremap <leader>v ^v$h

" delete line content
nnoremap <leader>dd ^v$hd
