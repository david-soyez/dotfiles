set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
Plugin 'StanAngeloff/php.vim'
Plugin 'shawncplus/phpcomplete.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-fugitive'
"Plugin 'bronson/vim-trailing-whitespace'
Plugin 'majutsushi/tagbar'
Plugin 'airblade/vim-gitgutter'
Plugin 'L9'
Plugin 'FuzzyFinder'
Plugin 'bling/vim-airline'
"Plugin 'kien/ctrlp.vim'
Plugin 'taglist.vim'
Plugin 'wincent/command-t'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'scrooloose/nerdtree'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
"Plugin 'xolox/vim-easytags'
"Plugin 'Shougo/neocomplete'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set laststatus=2
set statusline=%1*			" Switch to User1 color highlight
set statusline+=%<%F			" file name, cut if needed at start
set statusline+=%M			" modified flag
set statusline+=%y			" file type
set statusline+=%=			" separator from left to right justified

nmap <F8> :TagbarToggle<CR>
GitGutterEnable
GitGutterSignsEnable
GitGutterLineHighlightsDisable
let g:gitgutter_override_sign_column_highlight = 1
highlight SignColumn ctermbg=black    " terminal Vim
highlight SignColumn guibg=black      " gVim/MacVim

"theme and fonts
set background=dark
set t_Co=256
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai 
set guifont=Monospace\ 13

"set colorcolumn=110
"let w:m1=matchadd('ErrorMsg', '\%>110v.\+', -1)

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

"jk to exit insert mjjode
inoremap jk <esc>
inoremap <esc> <nop>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_Auto_Open = 1
let Tlist_Use_Right_Window = 1
nmap <C-Tab> :tabn <CR>

let mapleader = "\<Space>"

set number
set relativenumber

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <Leader>l :call NumberToggle()<cr>

" Control-S to save
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-O>:update<CR>

" Indentation
set expandtab
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent

"set hlsearch
"hi Search guibg=yellow

"open a NERDTree automatically when vim starts up
"autocmd vimenter * NERDTree
"shortcut to open NERDTree
noremap <Leader>n :NERDTreeToggle<CR>
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"opens tags in .git directory, looking for it parent to parent 
set tags=./.git/tags;

"let g:session_default_name = 'geolid'
let g:session_directory = '~/.vim/sessions'
let g:session_autoload = 'no'
let g:session_autosave = 'no'
"let g:session_autosave_to = 'geolid'
"let g:session_autosave_periodic = '5'
" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers
" Don't persist options and mappings because it can corrupt sessions.
set sessionoptions-=options

let g:ycm_key_invoke_completion = '<C-1>'

"Use TAB to complete when typing words, else inserts TABs as usual.
"Uses dictionary and source files to find matching words to complete.
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>

let g:neocomplete#enable_at_startup = 1

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For conceal markers.
"if has('conceal')
"  set conceallevel=2 concealcursor=niv
"endif

"Shortcuts for opening and saving sessions
noremap <A-o> :OpenSession<CR> 
noremap <A-s> :SaveSession<CR> 

"shortcut for C-X C-P
inoremap <C-Space> <C-x><C-p>
