set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins declaration starts here

Plugin 'StanAngeloff/php.vim' " Up-to-date PHP syntax file
Plugin 'shawncplus/phpcomplete.vim' " Improved PHP omnicompletion
Plugin 'nathanaelkane/vim-indent-guides' " displays indent levels in code
Plugin 'flazz/vim-colorschemes' " one colorscheme pack to rule them all
Plugin 'tpope/vim-fugitive' "  a Git wrapper
Plugin 'majutsushi/tagbar' " displays tags in a window F8
Plugin 'airblade/vim-gitgutter' " shows a git diff in the gutte
Plugin 'L9' " vim-scripts Library
Plugin 'FuzzyFinder' " vim-scripts Quickly reach the buffer/file/command/bookmark/tag
Plugin 'bling/vim-airline' " Lean and mean status bar
Plugin 'taglist.vim' " vim-scripts Tag List
Plugin 'wincent/command-t' " Fast file navigation
Plugin 'terryma/vim-multiple-cursors' " True Sublime Text style multiple selections for Vim
Plugin 'bronson/vim-trailing-whitespace' " Highlights trailing whitespace in red and provides :FixWhitespace to fix it
Plugin 'scrooloose/nerdtree' " A tree explorer plugin for vim
Plugin 'xolox/vim-misc' " xolox dependency
Plugin 'xolox/vim-session' " Extended session management for Vim
Plugin 'Valloric/YouCompleteMe' " A code-completion engine
Plugin 'SirVer/ultisnips' " The ultimate snippet solution for Vim
Plugin 'honza/vim-snippets' " supports all snippets with YouCompleteMe

" Plugins declaration ends here

call vundle#end()            " required
filetype plugin indent on    " required

" non-Plugin stuff after this line

set shortmess+=I " No intro when starting Vim
set history=100 " keep 100 undo
set wildmenu " Better command-line completion
set backspace=indent,eol,start " The normal behaviour of backspace

" search
set ignorecase " Search insensitive
set smartcase " Search always insensitive but sensitive when there is a uppercase
set incsearch " move the cursor to the matched string while typing
"built-in: Press * to search forwards for selected text, or # to search backwards

let &showbreak="\u21aa " " Show a left arrow when wrapping text

" statusbar
set laststatus=2
set statusline=%1*			" Switch to User1 color highlight
set statusline+=%<%F			" file name, cut if needed at start
set statusline+=%M			" modified flag
set statusline+=%y			" file type
set statusline+=%=			" separator from left to right justified

nmap <F8> :TagbarToggle<CR>
autocmd vimenter * GitGutterEnable
autocmd vimenter * GitGutterSignsEnable
autocmd vimenter * GitGutterLineHighlightsDisable
let g:gitgutter_override_sign_column_highlight = 1
highlight SignColumn ctermbg=black    " terminal Vim
highlight SignColumn guibg=black      " gVim/MacVim

"theme and fonts
set background=dark
set t_Co=256
let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai 
set guifont=Monospace\ 12

" speed up scrolling in terminal
set lazyredraw
set ttyfast

"set colorcolumn=110
"let w:m1=matchadd('ErrorMsg', '\%>110v.\+', -1)

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

"jk to exit insert mode
inoremap jk <esc>
inoremap <esc> <nop>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_Auto_Open = 1
let Tlist_Use_Right_Window = 1
nmap <C-Tab> :tabn <CR>

let mapleader = "\<Space>"

set number
set relativenumber

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <Leader>l :call NumberToggle()<cr>

" Control-S to save
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-O>:update<CR>

" Indentation
set expandtab
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent

"set hlsearch
"hi Search guibg=yellow

"open a NERDTree automatically when vim starts up
"autocmd vimenter * NERDTree
"shortcut to open NERDTree
noremap <Leader>n :NERDTreeToggle<CR>
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"opens tags in .git directory, looking for it parent to parent 
set tags=./.git/tags;

"let g:session_default_name = 'geolid'
let g:session_directory = '~/.vim/sessions'
let g:session_autoload = 'no'
let g:session_autosave = 'no'
"let g:session_autosave_to = 'geolid'
"let g:session_autosave_periodic = '5'
" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers
" Don't persist options and mappings because it can corrupt sessions.
set sessionoptions-=options

let g:ycm_key_invoke_completion = '<C-1>'

"Use TAB to complete when typing words, else inserts TABs as usual.
"Uses dictionary and source files to find matching words to complete.
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>

let g:neocomplete#enable_at_startup = 1

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For conceal markers.
"if has('conceal')
"  set conceallevel=2 concealcursor=niv
"endif

"Shortcuts for opening and saving sessions
noremap <A-o> :OpenSession<CR> 
noremap <A-s> :SaveSession<CR> 

"shortcut for C-X C-P
inoremap <C-Space> <C-x><C-p>

" indent guide
let g:indent_guides_auto_colors = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
autocmd vimenter * IndentGuidesEnable

" red cursor
highlight cursor guifg=white guibg=red

" disable cursor blinking:
set guicursor+=a:blinkon0

" cursor color
highlight Cursor guifg=red guibg=yellow

" color the currenet line
set cursorline
highlight CursorLine guifg=NONE guibg=#333333
highlight Visual guibg=pink guifg=#000000 gui=none

" map find /
nmap <Leader>f /

" for watch mode or live refresh
set backupcopy=yes

" ultisnips
let g:UltiSnipsExpandTrigger="<C-b>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
